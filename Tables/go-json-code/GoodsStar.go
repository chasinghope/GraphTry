
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type GoodsStar struct {
    Id int32
    Star int32
    Common int32
    Rare int32
    Epic int32
    Legendary int32
    Mythical int32
    Special int32
}

const TypeId_GoodsStar = -896428376

func (*GoodsStar) GetTypeId() int32 {
    return -896428376
}

func NewGoodsStar(_buf map[string]interface{}) (_v *GoodsStar, err error) {
    _v = &GoodsStar{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["id"].(float64); !_ok_ { err = errors.New("id error"); return }; _v.Id = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["star"].(float64); !_ok_ { err = errors.New("star error"); return }; _v.Star = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["common"].(float64); !_ok_ { err = errors.New("common error"); return }; _v.Common = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["rare"].(float64); !_ok_ { err = errors.New("rare error"); return }; _v.Rare = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["epic"].(float64); !_ok_ { err = errors.New("epic error"); return }; _v.Epic = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["legendary"].(float64); !_ok_ { err = errors.New("legendary error"); return }; _v.Legendary = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["mythical"].(float64); !_ok_ { err = errors.New("mythical error"); return }; _v.Mythical = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["special"].(float64); !_ok_ { err = errors.New("special error"); return }; _v.Special = int32(_tempNum_) }
    return
}

