
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type Rank struct {
    RankId int32
    Name string
    SubRank int32
    SubLevel int32
    Score int32
    BaseHp int32
    BasePower int32
    RewardScoreList []int32
    RewardGoldList []int32
}

const TypeId_Rank = 2539596

func (*Rank) GetTypeId() int32 {
    return 2539596
}

func NewRank(_buf map[string]interface{}) (_v *Rank, err error) {
    _v = &Rank{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["rankId"].(float64); !_ok_ { err = errors.New("rankId error"); return }; _v.RankId = int32(_tempNum_) }
    { var _ok_ bool; if _v.Name, _ok_ = _buf["name"].(string); !_ok_ { err = errors.New("name error"); return } }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["subRank"].(float64); !_ok_ { err = errors.New("subRank error"); return }; _v.SubRank = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["subLevel"].(float64); !_ok_ { err = errors.New("subLevel error"); return }; _v.SubLevel = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["score"].(float64); !_ok_ { err = errors.New("score error"); return }; _v.Score = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["baseHp"].(float64); !_ok_ { err = errors.New("baseHp error"); return }; _v.BaseHp = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["basePower"].(float64); !_ok_ { err = errors.New("basePower error"); return }; _v.BasePower = int32(_tempNum_) }
     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["rewardScoreList"].([]interface{}); !_ok_ { err = errors.New("rewardScoreList error"); return }
    
                    _v.RewardScoreList = make([]int32, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e_.(float64); !_ok_ { err = errors.New("_list_v_ error"); return }; _list_v_ = int32(_x_) }
                        _v.RewardScoreList = append(_v.RewardScoreList, _list_v_)
                    }
                }

     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["rewardGoldList"].([]interface{}); !_ok_ { err = errors.New("rewardGoldList error"); return }
    
                    _v.RewardGoldList = make([]int32, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e_.(float64); !_ok_ { err = errors.New("_list_v_ error"); return }; _list_v_ = int32(_x_) }
                        _v.RewardGoldList = append(_v.RewardGoldList, _list_v_)
                    }
                }

    return
}

