
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type Item struct {
    Id int32
    Name string
    Canuse bool
    CompositeList []int32
    IsOrigin bool
    Wgirds int32
    Hgirds int32
    RoleType int32
    ItemType int32
    ItemQuality int32
    Price int32
}

const TypeId_Item = 2289459

func (*Item) GetTypeId() int32 {
    return 2289459
}

func NewItem(_buf map[string]interface{}) (_v *Item, err error) {
    _v = &Item{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["id"].(float64); !_ok_ { err = errors.New("id error"); return }; _v.Id = int32(_tempNum_) }
    { var _ok_ bool; if _v.Name, _ok_ = _buf["name"].(string); !_ok_ { err = errors.New("name error"); return } }
    { var _ok_ bool; if _v.Canuse, _ok_ = _buf["canuse"].(bool); !_ok_ { err = errors.New("canuse error"); return } }
     {
                    var _arr_ []interface{}
                    var _ok_ bool
                    if _arr_, _ok_ = _buf["compositeList"].([]interface{}); !_ok_ { err = errors.New("compositeList error"); return }
    
                    _v.CompositeList = make([]int32, 0, len(_arr_))
                    
                    for _, _e_ := range _arr_ {
                        var _list_v_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e_.(float64); !_ok_ { err = errors.New("_list_v_ error"); return }; _list_v_ = int32(_x_) }
                        _v.CompositeList = append(_v.CompositeList, _list_v_)
                    }
                }

    { var _ok_ bool; if _v.IsOrigin, _ok_ = _buf["isOrigin"].(bool); !_ok_ { err = errors.New("isOrigin error"); return } }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["wgirds"].(float64); !_ok_ { err = errors.New("wgirds error"); return }; _v.Wgirds = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["hgirds"].(float64); !_ok_ { err = errors.New("hgirds error"); return }; _v.Hgirds = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["RoleType"].(float64); !_ok_ { err = errors.New("RoleType error"); return }; _v.RoleType = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["ItemType"].(float64); !_ok_ { err = errors.New("ItemType error"); return }; _v.ItemType = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["ItemQuality"].(float64); !_ok_ { err = errors.New("ItemQuality error"); return }; _v.ItemQuality = int32(_tempNum_) }
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["Price"].(float64); !_ok_ { err = errors.New("Price error"); return }; _v.Price = int32(_tempNum_) }
    return
}

