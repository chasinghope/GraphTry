
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg
{
public sealed partial class Item : Luban.BeanBase
{
    public Item(JSONNode _buf) 
    {
        { if(!_buf["id"].IsNumber) { throw new SerializationException(); }  Id = _buf["id"]; }
        { if(!_buf["name"].IsString) { throw new SerializationException(); }  Name = _buf["name"]; }
        { if(!_buf["canuse"].IsBoolean) { throw new SerializationException(); }  Canuse = _buf["canuse"]; }
        { if(!_buf["compositeMain"].IsNumber) { throw new SerializationException(); }  CompositeMain = _buf["compositeMain"]; }
        { var __json0 = _buf["compositeList"]; if(!__json0.IsArray) { throw new SerializationException(); } CompositeList = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  CompositeList.Add(__v0); }   }
        { if(!_buf["compriority"].IsNumber) { throw new SerializationException(); }  Compriority = _buf["compriority"]; }
        { if(!_buf["isOrigin"].IsBoolean) { throw new SerializationException(); }  IsOrigin = _buf["isOrigin"]; }
        { var __json0 = _buf["placingType"]; if(!__json0.IsArray) { throw new SerializationException(); } PlacingType = new System.Collections.Generic.List<Battle.PSkillCondition>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { Battle.PSkillCondition __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = (Battle.PSkillCondition)__e0.AsInt; }  PlacingType.Add(__v0); }   }
        { var __json0 = _buf["placingIds"]; if(!__json0.IsArray) { throw new SerializationException(); } PlacingIds = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  PlacingIds.Add(__v0); }   }
        { if(!_buf["wgirds"].IsNumber) { throw new SerializationException(); }  Wgirds = _buf["wgirds"]; }
        { if(!_buf["hgirds"].IsNumber) { throw new SerializationException(); }  Hgirds = _buf["hgirds"]; }
        { if(!_buf["RoleType"].IsNumber) { throw new SerializationException(); }  RoleType = (Battle.RoleType)_buf["RoleType"].AsInt; }
        { if(!_buf["ItemType"].IsNumber) { throw new SerializationException(); }  ItemType = (Battle.ItemType)_buf["ItemType"].AsInt; }
        { if(!_buf["audioseplace"].IsString) { throw new SerializationException(); }  Audioseplace = _buf["audioseplace"]; }
        { if(!_buf["ElementType"].IsNumber) { throw new SerializationException(); }  ElementType = (Battle.ElementType)_buf["ElementType"].AsInt; }
        { if(!_buf["ItemQuality"].IsNumber) { throw new SerializationException(); }  ItemQuality = (Battle.ItemQuality)_buf["ItemQuality"].AsInt; }
        { if(!_buf["assetPath"].IsString) { throw new SerializationException(); }  AssetPath = _buf["assetPath"]; }
        { if(!_buf["Price"].IsNumber) { throw new SerializationException(); }  Price = _buf["Price"]; }
        { if(!_buf["AvaiNumber"].IsNumber) { throw new SerializationException(); }  AvaiNumber = _buf["AvaiNumber"]; }
    }

    public static Item DeserializeItem(JSONNode _buf)
    {
        return new Item(_buf);
    }

    /// <summary>
    /// uid
    /// </summary>
    public readonly int Id;
    /// <summary>
    /// 名称
    /// </summary>
    public readonly string Name;
    /// <summary>
    /// 是否可用
    /// </summary>
    public readonly bool Canuse;
    /// <summary>
    /// 合成主体
    /// </summary>
    public readonly int CompositeMain;
    /// <summary>
    /// 合成道具集合
    /// </summary>
    public readonly System.Collections.Generic.List<int> CompositeList;
    /// <summary>
    /// 合成优先级
    /// </summary>
    public readonly int Compriority;
    /// <summary>
    /// 是否是初始道具
    /// </summary>
    public readonly bool IsOrigin;
    /// <summary>
    /// 摆放技能用 类型
    /// </summary>
    public readonly System.Collections.Generic.List<Battle.PSkillCondition> PlacingType;
    /// <summary>
    /// 摆放技能列表
    /// </summary>
    public readonly System.Collections.Generic.List<int> PlacingIds;
    /// <summary>
    /// 宽
    /// </summary>
    public readonly int Wgirds;
    /// <summary>
    /// 高
    /// </summary>
    public readonly int Hgirds;
    /// <summary>
    /// 所属职业
    /// </summary>
    public readonly Battle.RoleType RoleType;
    /// <summary>
    /// 道具类型
    /// </summary>
    public readonly Battle.ItemType ItemType;
    /// <summary>
    /// 摆放音效名称
    /// </summary>
    public readonly string Audioseplace;
    /// <summary>
    /// 元素种类
    /// </summary>
    public readonly Battle.ElementType ElementType;
    /// <summary>
    /// 品质类型
    /// </summary>
    public readonly Battle.ItemQuality ItemQuality;
    /// <summary>
    /// 预制体路径
    /// </summary>
    public readonly string AssetPath;
    /// <summary>
    /// 售价/元
    /// </summary>
    public readonly int Price;
    /// <summary>
    /// 可用个数
    /// </summary>
    public readonly int AvaiNumber;
   
    public const int __ID__ = 2289459;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "name:" + Name + ","
        + "canuse:" + Canuse + ","
        + "compositeMain:" + CompositeMain + ","
        + "compositeList:" + Luban.StringUtil.CollectionToString(CompositeList) + ","
        + "compriority:" + Compriority + ","
        + "isOrigin:" + IsOrigin + ","
        + "placingType:" + Luban.StringUtil.CollectionToString(PlacingType) + ","
        + "placingIds:" + Luban.StringUtil.CollectionToString(PlacingIds) + ","
        + "wgirds:" + Wgirds + ","
        + "hgirds:" + Hgirds + ","
        + "RoleType:" + RoleType + ","
        + "ItemType:" + ItemType + ","
        + "audioseplace:" + Audioseplace + ","
        + "ElementType:" + ElementType + ","
        + "ItemQuality:" + ItemQuality + ","
        + "assetPath:" + AssetPath + ","
        + "Price:" + Price + ","
        + "AvaiNumber:" + AvaiNumber + ","
        + "}";
    }
}

}
